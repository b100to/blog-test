name: deploy_no_cache

on:
  push:
    branches:
      - feature/no-cache

  workflow_dispatch:
env:
  ECS_CLUSTER_NAME: blog-test
  ECS_SERVICE_NAME: test-blog123
  IMAGE_NAME: blog-test
  IMAGE_TAG: latest
  ECR_REGISTRY: ${{ secrets.DEV_AWS_ACCOUNT_ID }}.dkr.ecr.ap-northeast-2.amazonaws.com

jobs:
  Build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
#      - name: Setup Gradle
#        uses: gradle/gradle-build-action@v2
#        with:
#          gradle-version: wrapper

      - name: Setup Java JDK
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 11
#          cache: gradle
      - run: ./gradlew --no-daemon build

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: app
          path: build/libs

  Deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Download app
        uses: actions/download-artifact@v2
        with:
          name: app
          path: build/libs

#      -
#        name: Set up Docker Buildx
#        id: buildx
#        uses: docker/setup-buildx-action@v2
#        with:
#          install: true

#      - name: Cache Docker layers
#        uses: actions/cache@v2
#        with:
#          path: /tmp/.buildx-cache
#          key: ${{ runner.os }}-buildx-${{ github.sha }}
#          restore-keys: |
#            ${{ runner.os }}-buildx-

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.DEV_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.DEV_AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-northeast-2

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Inspect builder
        run: |
          docker build -t $ECR_REGISTRY/$IMAGE_NAME:$IMAGE_TAG  .
          docker push $ECR_REGISTRY/$IMAGE_NAME:$IMAGE_TAG

      - name: Force deploy to ECS
        run: |
          aws ecs update-service --cluster $ECS_CLUSTER_NAME --service $ECS_SERVICE_NAME --force-new-deployment
        #ㅁㅇㄴㄹㅁㄴㅇ